Object.toString = () => a;      // defines what to return when coerced to string
Object.valueOf = () => a;       // defines what to return when coerced to number


------- origin of html -----------
Tim Berners-Lee, a British computer scientist at CERN, invented HTML as part of his larger project to create a global information-sharing system, which became the World Wide Web.

**** html is not case-sesitive for tags and attribute names
Example: below is rendered a normal
<HTML>
  <BoDy>
    <Div CLASS="myClass">Hello, World!</Div>
  </BoDy>
</HTML>




------ explore html5 ----------


---------------explore all tags in html5-----------



--------------- CSS -------------
** block elements, inline-elements, inline-block elements
1) block elements start on a new line, breaks with a new line. can set height and widht for them (takes full width of avialble view port)
examples: div,p,h,form, article ,selection
2) inline-elements takes width of the content, and dont start or break with new line. cannot set width or height for those elements.
example: span, a, img, abbr,input etc
3) inline-block  are same as inline but height and width can be set.

** css psudo-selectors
exampels .class_name::after, ::before, ::selection


** css psuedo class
ex: :hover, :active, :focus etc


** css float property
float property takes the block level element out the block level view. all the inline content can wrap around it. 
* not as it removed from block level flow. parent will collapse/floated element will not be contained by its parent.

** clear property
this property is used to clear all the floating element for a element on left,right or both
example: clear:left, clear:both etc

** css postion property
possible values: 
1) static(default)
2) relative(position element relative to itself with top,right, bottom, left)
3) fixed(positioning element with respect to view port)
4) abosule(positioning element with respect to its positioned  parent(bnearest ancestor)(if parent is not positioned its with repect to view port))


***The important parts of a web browser as represented in JavaScript â€” 
1) Navigator, 
2) Window, 
3) and Document.


** beforeunload and unload event in js
above events are invoked when user is leaving a web page. usefull for put some warning while  leaving.

** important event listerners on window object
-- resize,load, unload, online, offline, deviceorientation


------- TextNode-----
A Text Node in the DOM (Document Object Model) represents the actual text content inside an HTML element, but not the element itself.

----- ** work with dates and polyfill implmentations(through with js methods of array, object and string)


--- localStorage vs sessionStorage vs cookies--------

1) localstorage persists over tab relaod,tab close and browser closes.
2) session storage just persists over page reloads, closes on browser close or tab close.
3) cookie can be session based or perists when expiry date is set

----------promises -------
*** js Promise takes two call backs fucntion with resovle or reject.

*** then and catch methods in js takes fullfile or rejected callback values and returns wrapped values of the return value if there is a return values set in the then or catch function.

 
------------** promise chaining
*** in chain of promise hanlding "return" will returns a promise wrapped with returned value. throw error will return a rejected promise wrapper with error.

example:
let p1 = new Promise((resolve,reject)=>{
    resolve()
})

p1.then((res)=>{
    console.log(res)
    // return "dsfds"
})
.then((res)=>{
    console.log(res)
    // return "dfdfdfd"
}).then((res)=>{
    console.log(res)
    // return "dfdfdfd"
    throw Error("my error")
}).catch((err)=>{
    console.log(err)
    return "hello"
}).then((res)=>{
    console.log(res)
}).catch((err)=>{
    console.log(err)
})

output
---------------------------------
undefined
undefined
dfdfdfd
Error: my error
    at c:\Users\chandra sekhar\StudioProjects\go Learning\promises\1.js:15:11
hello


-------- * toString and valueOf methods------------
toString = this returns string representation of object by default [object object] for user defined objects
valueOf = this tries to return the primitive value of object if no primitive values exists it return object itself


*** settimeout--------
// method signature
setTimeout(callback, delay, arg1, arg2, ..., argN)

here arg1 ... argN are paramerter passed to callack function


***------- implicit type  conversion in js -------------
ability of js to type coarce from one data type to another during concatiaiton or comparfision or arithmatiec operaction

***** why js has primitive and boxed types of same primties --------
to give primitevi behavior of objects and able to include method for them


**** auto boxing and unboxing js
ability of js to interpreteing primitvis as boxed when needed and boxed as promites baseed on conditions


*---------------------Nodejs event loop--------------
-> libuv is the library used by js that has the event loop this library is written in c
-> all the synchrounoes code is executed with blocking like and libuv takes care of the asychroues code with event loop

 ***** thread pool in Nodejs
 even though js a single threaded under the hood. event loop and libuv use some worker treads to offline task from main thread.

***** js exection stack with event loop components

1) call stack
2) event loop controler'
3) task queues (macro and microtask queue)


**** different queues in nodejs event loop and priorty

1) mirotask queue (process.nextTick first and promises are given second priority)
2) timer queue (settmeout, setubterval callback)
3) IO queue (io callbacks)
4) checkqueue (set immediate)
5) close queue ( callback related to closing resouarces are executed ) exampels stream.on("close',())


----------- *** steps in event loop---
1) all synchronouse code exected first.
2) all tasks in microtask queue are executed first(with giving priority to nextTick callbacks first)
3) all callback available/ready for timer queue are executed.
4) if any callback available in microtask queue they are executed next
5) all callbacks in IO queue are executed.
6) if any callback available in microtask they will be executed
7) all callback ready in check queue are executed(set immedieance)
8) if any callbacks available in microstask queue are exectured
9) all callbacks in close are executed.
10) anycallbacks aviable in microtask queue they are executed.



 ***** JS promises methods ********

1) Promise.all([p1,p2])  // waits for all promises to finish early on first reject.
used for called mulitple promises concurrenlty bettern than waitiing for each promise with await
2) primise.allSettled([p1,p2,p3]) // wiats for all to resolve/reject and returns the result on then fmethod
3) promise.race // resolve/reject with first settle promised
4) primise.any // resolved with first succesull promise error if all reject

**** this and bind in js normatl function and object

some imp example

  const car = {
    brand: "Tesla",
    showBrand() {
      console.log(this.brand);
    }
  };
  
  car.showBrand() // output Tesla
  const show = car.showBrand;
  show(); // output undefined

  explanation in the first called method of car is being called with object referece. so contex of this belongs to object
   but in the second we have copied the funciton but here this refers to global or window object. as there is no context

** we can use bind method to attach this context to function of an object
 let ; show2  = car.showBrand
 show2 = show2.bind(car)
 show2() // output Tesla


***------- closures is js ---------------
closure is function behavior that retains outer functions scope even after the outer function fixed its execution and removed from exection stack


**------------- implicit type conversion in js-----
applications of closure
1) date privacy and enacasulation (hiding variable in function scope)
2) able async functions to retain ourter funtions context or variales
3) can create function factories 
 ** function factory is a function that returns other function which is retain someconfiguration or state provided like 
4) *** used in memoization (caching result of functions)

 example
 ------------
 
 function multiplier(factor) {
  return function(number) {
    return number * factor;
  };
}

const double = multiplier(2);
const triple = multiplier(3);

console.log(double(5)); // 10
console.log(triple(5)); //


*** ------implement debouncer throttler and memoized  application using closure

** debouncer and throttler are unsed to control the limit of function exeuction,

deboucer: delay the function for over a time. any unnecsassy immediate calls are not executed
throttler: limti the rate of funciton execution for some rate in an interval



***** Date Object tutorial ------------------


****** seo optimisation step ---------------
1) add tags and relavant content in title
2) add meta  description tag with relavanet content and tags
3) use sematic tags for better crawling(article, section, footer)
4) 	Use <h1> for the main title, <h2> for subheadings, etc.
5) use alt for image seo with description of image
6) use internal page linking with bookmarks and href to same page other pages.



***---- practice on media queries, animation/transitions grids and flexbox ---------------


***** html crash course -----------------------------



*** ----- form element html -------
** action attribute:


***** webpack and babel in js World
webpack: this is a module bundler takes all files(html, css and js) and serves to from in a optimised way
babel: babel is a transpiler that converts to new js to older js for browsers to understand.


*****------------ explore dynmaically adding style attrubutes, classes through dom js